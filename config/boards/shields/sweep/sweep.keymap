// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>

// Define layers

#define LAYER_ALPHA 0
#define LAYER_NUMBSYM 1
#define LAYER_FUNCTION 2
#define LAYER_APPCONTROL 3
#define LAYER_MOUSE 4


// Define positions for combos

#define	qk	0
#define	wk	1
#define	ek	2
#define	rk	3
#define	tk	4
#define	yk	5
#define	uk	6
#define	ik	7
#define	ok	8
#define	pk	9
#define	ak	10
#define	sk	11
#define	dk	12
#define	fk	13
#define	gk	14
#define	hk	15
#define	jk	16
#define	kk	17
#define	lk	18
#define	semik	19
#define	zk	20
#define	xk	21
#define	ck	22
#define	vk	23
#define	bk	24
#define	nk	25
#define	mk	26
#define	commak	27
#define	periodk	28
#define	slashk	29
#define	tabk	30
#define	spacek	31
#define	enterk	32
#define	backspk	33

#define LEFT_K qk wk ek rk tk ak sk dk fk gk zk xk ck vk bk
#define RIGHT_K yk uk ik ok pk hk jk lk semik nk mk commak periodk slashk
#define THUMB_K tabk spacek enterk backspk

&caps_word {
    continue-list = <BACKSPACE DELETE>;
};

/ {
    macros {
        control_panel: control_panel { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 200>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp C &kp O &kp N &kp T &kp R &kp O &kp L &kp ENTER>
                ;
        };

        launch_chrome: launch_chrome { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 200>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp C &kp H &kp R &kp O &kp M &kp E &kp ENTER>
                ;
        };

        mycomputer: mycomputer { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 200>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp S &kp H &kp E &kp L &kp L &kp COLON &kp M &kp Y &kp C &kp O &kp M &kp P &kp U &kp T &kp E &kp R &kp F &kp O &kp L &kp D &kp E &kp R &kp ENTER>
                ;
        };
	
	launch_vscode: launch_vscode { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 200>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp C &kp O &kp D &kp E &kp ENTER>
                ;
        };

    	launch_edge: launch_edge { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 200>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp M &kp I &kp C &kp R &kp O &kp S &kp O &kp F &kp T &kp MINUS &kp E &kp D &kp G &kp E &kp COLON &kp ENTER>
                ;
        };
    	
	launch_notepadpp: launch_notepadpp { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp R>
		, <&macro_wait_time 200>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp N &kp O &kp T &kp E &kp P &kp A &kp D &kp PLUS &kp PLUS &kp ENTER>
                ;
        };
    	
        // Layer with mod when held
	
	lm: lm {
	    compatible = "zmk,behavior-macro-two-param";
	    wait-ms = <0>;
	    tap-ms = <0>;
	    #binding-cells = <2>;
	    bindings
	        = <&macro_param_1to1>
	        , <&macro_press &mo MACRO_PLACEHOLDER>
	        , <&macro_param_2to1>
	        , <&macro_press &kp MACRO_PLACEHOLDER>
	        , <&macro_pause_for_release>
	        , <&macro_param_2to1>
	        , <&macro_release &kp MACRO_PLACEHOLDER>
	        , <&macro_param_1to1>
	        , <&macro_release &mo MACRO_PLACEHOLDER>
	        ;
	};
    };
};


/ {
    combos {
        compatible = "zmk,combos";

        // Characters
		
        combo_doublequ {
            timeout-ms = <50>;
            key-positions = <dk fk>;
            bindings = <&kp DQT>;
        };
	combo_singlequ {
            timeout-ms = <50>;
            key-positions = <jk kk>;
            bindings = <&kp SQT>;
        };
	combo_lpar {
            timeout-ms = <50>;
            key-positions = <ck vk>;
            bindings = <&kp LPAR>;
        };
	combo_rpar {
            timeout-ms = <50>;
            key-positions = <mk commak>;
            bindings = <&kp RPAR>;
        };
	combo_lbrace {
            timeout-ms = <50>;
            key-positions = <xk ck vk>;
            bindings = <&kp LBKT>;
        };
	combo_rbrace {
            timeout-ms = <50>;
            key-positions = <mk commak periodk>;
            bindings = <&kp RBKT>;
        };
	combo_lcurly {
            timeout-ms = <50>;
            key-positions = <xk vk>;
            bindings = <&kp LBRC>;
        };
	combo_rcurly {
            timeout-ms = <50>;
            key-positions = <mk periodk>;
            bindings = <&kp RBRC>;
        };

        // macro combos

         combo_chrome {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck hk>;
            bindings = <&launch_chrome>;
        };

        combo_mycomputer {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck yk>;
            bindings = <&mycomputer>;
        };

        combo_cpanel {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck nk>;
            bindings = <&control_panel>;
        };

        combo_vscode {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck uk>;
            bindings = <&launch_vscode>;
        };

        combo_edge {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck jk>;
            bindings = <&launch_edge>;
        };
        
        combo_notepadpp {
            timeout-ms = <50>;
	    require-prior-idle-ms = <300>;
            key-positions = <ck mk>;
            bindings = <&launch_notepadpp>;
        };

        // Layer combos
        
        combo_alpha {
            timeout-ms = <50>;
            key-positions = <jk kk lk>;
            bindings = <&to LAYER_ALPHA>;
        };
        combo_numbsym {
            timeout-ms = <50>;
            key-positions = <hk jk kk>;
            bindings = <&tog LAYER_NUMBSYM>;
        };
        combo_numbsymosl {
            timeout-ms = <50>;
            key-positions = <hk kk>;
            bindings = <&sl LAYER_NUMBSYM>;
        };
        combo_func {
            timeout-ms = <50>;
            key-positions = <nk mk commak>;
            bindings = <&tog LAYER_FUNCTION>;
        };
        combo_funcosl {
            timeout-ms = <50>;
            key-positions = <nk commak>;
            bindings = <&sl LAYER_FUNCTION>;
        };
        combo_apps {
            timeout-ms = <50>;
            key-positions = <yk uk ik>;
            bindings = <&tog LAYER_APPCONTROL>;
        };
        combo_appsosl {
            timeout-ms = <50>;
            key-positions = <yk ik>;
            bindings = <&sl LAYER_APPCONTROL>;
        };

        combo_mouse {
            timeout-ms = <50>;
            key-positions = <wk ek rk tk>;
            bindings = <&tog LAYER_MOUSE>;
        };
        
	// activate number layer with shift when held.

	comnbo_layermod_right {
	    timeout-ms = <50>;
            key-positions = <sk fk>;
            bindings = <&lm LAYER_NUMBSYM LSHIFT>;
	};

	comnbo_layermod_left {
	    timeout-ms = <50>;
            key-positions = <hk jk>;
            bindings = <&lm LAYER_NUMBSYM RSHIFT>;
	};

	// Behavioral

        combo_esc {
            timeout-ms = <50>;
            key-positions = <fk gk>;
            bindings = <&kp ESC>;
        };
	
	combo_winclose {
            timeout-ms = <50>;
 	    require-prior-idle-ms = <250>;
            key-positions = <rk tk>;
            bindings = <&kp LC(F4)>;
        };
	
	combo_appclose {
            timeout-ms = <50>;
 	    require-prior-idle-ms = <250>;
            key-positions = <vk bk>;
            bindings = <&kp LA(F4)>;
        };
	combo_caplock {
            timeout-ms = <50>;
            key-positions = <zk xk ck>;
            bindings = <&kp CAPS>;
        };
	combo_capsword {
            timeout-ms = <50>;
            key-positions = <ck bk>;
            bindings = <&caps_word>;
        };
	combo_del {
            timeout-ms = <50>;
            key-positions = <dk gk>;
            bindings = <&kp DEL>;
        };
	combo_ins {
            timeout-ms = <50>;
            key-positions = <ck bk>;
            bindings = <&kp INS>;
        };
	combo_leftarr {
            timeout-ms = <100>;
            key-positions = <dk fk gk>;
            bindings = <&kp LEFT>;
        };
	combo_rightarr {
            timeout-ms = <100>;
            key-positions = <ek rk tk>;
            bindings = <&kp RIGHT>;
        };
	combo_uparr {
            timeout-ms = <100>;
            key-positions = <wk ek rk>;
            bindings = <&kp UP>;
        };
	combo_dnarr {
            timeout-ms = <100>;
            key-positions = <sk dk fk>;
            bindings = <&kp DOWN>;
        };
	combo_pgup {
            timeout-ms = <50>;
            key-positions = <fk jk>;
            bindings = <&kp PG_UP>;
        };
	combo_pgdn {
            timeout-ms = <50>;
            key-positions = <vk mk>;
            bindings = <&kp PG_DN>;
        };
	combo_home {
            timeout-ms = <50>;
            key-positions = <gk hk>;
            bindings = <&kp HOME>;
        };
	combo_end {
            timeout-ms = <50>;
            key-positions = <bk nk>;
            bindings = <&kp END>;
        };
    	combo_teamsmute {
            timeout-ms = <50>;
            key-positions = <rk uk>;
            bindings = <&kp LS(LC(M))>;
        };
    	combo_teamsvidtog {
            timeout-ms = <50>;
            key-positions = <tk yk>;
            bindings = <&kp LS(LC(O))>;
        };

	// Boot key combos

	combo_bootleft {
            timeout-ms = <50>;
            key-positions = <qk tk>;
            bindings = <&bootloader>;
        };

	combo_bootright {
            timeout-ms = <50>;
            key-positions = <yk pk>;
            bindings = <&bootloader>;
        };

    };
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
	    htql: hold_tapql {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <RIGHT_K THUMB_K>;
            bindings = <&kp>, <&kp>;
        };
	    htqr: hold_tapqr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <LEFT_K THUMB_K>;
            bindings = <&kp>, <&kp>;
        };
       
       htel: hold_tapel {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <500>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <RIGHT_K THUMB_K>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };
	    hter: hold_taper {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <500>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <LEFT_K THUMB_K>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };
       
       htl: hold_tap_ll {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <400>;
            hold-trigger-key-positions = <RIGHT_K THUMB_K>;
            bindings = <&kp>, <&kp>;
        };
        htr: hold_tap_lr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <400>;
            hold-trigger-key-positions = <LEFT_K THUMB_K>;
            bindings = <&kp>, <&kp>;
        };
        pt: hold_tap_permissive {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };
        ptl: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <120>;
            hold-trigger-key-positions = <RIGHT_K THUMB_K>;
            bindings = <&kp>, <&kp>;
        };
        ptr: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <120>;
            hold-trigger-key-positions = <LEFT_K THUMB_K>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
alpha_layer {
bindings = <
   //             HYPER           										     HYPER
    &kp Q  &kp W  &htl LS(LC(LA(LGUI))) E  &htl LC(LALT) R &htl LGUI T           &htr RGUI Y         &htr RC(RALT) U &htr RS(RC(RA(RGUI))) I &kp O    &kp P
   //    	  MEH												     MEH
    &kp A  &kp S  &htl LC(LA(LSHIFT)) D    &htel LCTRL F   &htel LC(LSHIFT) G    &hter RC(RSHIFT) H  &hter RCTRL J   &htr RC(RA(RSHIFT)) K   &kp L    &kp SEMI
    &kp Z  &kp X  &kp C                    &htel LALT V    &htel LS(LALT) B      &hter LS(LALT) N    &hter RALT M    &kp COMMA               &kp DOT  &kp FSLH
                                           &ptl LCTRL TAB  &ptl LSHIFT SPACE     &ptr RSHIFT ENTER   &ptr RCTRL BSPC
            >;
        };

numbsym_layer {
bindings = <
  //│ !        │  @       │  #       │  $       │  %     │   │ ^        │ &        │ *        │ (        │  )       │
    &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR
    &kp N1     &kp N2     &kp N3     &kp N4     &kp N5        &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
  //│ ` ~      │   \  |   │  = +     │  -       │  _     │   │  ' "     │  ; :     │ , <      │   . >    │   / ?    │
    &kp GRAVE  &kp BSLH   &kp EQUAL  &kp MINUS  &kp UNDER     &kp SQT    &kp SEMI   &kp COMMA  &kp DOT    &kp SLASH
                                     &trans     &trans        &trans     &trans
            >;
        };

function_layer {
bindings = <
    &kp C_PLAY      &kp C_STOP &kp C_NEXT &kp C_AC_BACK  &kp F11              &kp F12             &kp C_MUTE  &kp K_VOL_UP  &kp C_VOL_DN  &kp RG(L)
    &kp F1          &kp F2     &kp F3     &kp F4         &kp F5               &kp F6              &kp F7      &kp F8        &kp F9        &kp F10
    &kp LC(LA(DEL)) &kp LGUI   &kp LALT   &kp LCTRL      &kp LC(LA(LSHIFT))   &kp RC(RA(RSHIFT))  &kp RCTRL   &kp RALT      &kp RGUI      &kp LC(LA(DEL))
                                          &trans         &trans               &trans              &trans
            >;
        };

appcontrol_layer {
bindings = <
     &bt BT_CLR  &bt BT_SEL 0 &kp LS(LC(LA(LG(L))))  &kp LS(LC(LA(LG(O))))  &kp LS(LC(LA(LG(T))))    &kp LG(E)      &kp C_BRI_UP    &kp C_BRI_DN    &bt BT_SEL 0 &bt BT_CLR
     &bootloader &bt BT_SEL 1 &control_panel         &kp LS(LC(LA(LG(P))))  &kp LS(LC(LA(LG(W))))    &kp C_AL_CALC  &kp RC(RS(ESC)) &kp LG(R)       &bt BT_SEL 1 &bootloader
     &sys_reset  &bt BT_SEL 2 &launch_chrome         &kp LG(DOT)            &kp LS(LC(LA(LG(X))))    &kp LS(LG(S))  &kp LG(V)       &mycomputer     &bt BT_SEL 2 &sys_reset
                                                     &trans                 &trans                   &trans         &trans
            >;
        };

mouse_layer {
bindings = <
    &kp LC(LS(O)) &kp LC(T)    &kp LC(LS(T))  &kp LA(HOME) &kp UP       &kp PG_UP    &msc SCRL_LEFT &mmv MOVE_UP    &msc SCRL_RIGHT  &kp K_VOL_UP
    &kp LC(D)     &mkp LCLK    &mkp MCLK      &mkp  RCLK   &kp DOWN     &kp PG_DN    &mmv MOVE_LEFT &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp K_VOL_DN
    &kp LC(LS(B)) &kp LC(N)    &kp LS(LC(N))  &kp LEFT     &kp RIGHT    &kp HOME     &msc SCRL_UP   &msc SCRL_DOWN  &kp END          &kp K_MUTE
                                              &trans       &trans       &trans       &trans
            >;
        };
    };
};
